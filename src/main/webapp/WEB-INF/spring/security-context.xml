<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
	<!--customAccessDenied 실패요청 처리  -->
	<bean id="customAccessDenied"
		class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	<!-- 로그인 성공 처리자! -->
	<bean id="customLoginSuccess" 
		class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>
	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록 -->
	<bean id="customPasswordEncoder" 
		class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean>
	<!-- 스프링 시큐리티의 UserDetails를 구현한 클래스를 빈으로 등록. 우리들 테이블로써 인증/인가 처리하기 위함 -->
	<bean id="customUserDetailsService" 
		class="kr.or.ddit.security.CustomUserDetailsService">
	
	</bean>
		
	<!-- xmlns : xml namespace의 약자 -->
	<security:http>
	
		<!-- 사용자가 정의한 로그인 페이지의 URI를 지정함 
			customLoginSuccess : 로그인 성공 처리자로 지정-->
		<security:form-login login-page="/login/login" 
			authentication-success-handler-ref="customLoginSuccess" />
		
		<!-- 접근 거부 처리자의 URI를 지정함 -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<!-- 데이터소스를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록함(persistent_logins 테이블) -->
		<!-- 쿠키의 유효시간을 지정함 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃 한 후의 세션을 무효화 함. (session.invalidate()) -->
		<security:logout logout-url="/logout" logout-success-url="/login/login" invalidate-session="true"
			delete-cookies="remember-me,JSESSION_ID" />
			
		<security:intercept-url pattern="/j_spring_security_logout" access="permitAll"/>
			
	</security:http>
	
	
	<!-- 인증 매니저(아이디, 비밀번호) -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">

			<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정함 -->
			<security:password-encoder ref="customPasswordEncoder"/>
			
		</security:authentication-provider>
	</security:authentication-manager>
</beans>